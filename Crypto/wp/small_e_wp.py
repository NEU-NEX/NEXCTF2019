from Crypto.Util import number
import gmpy2

length = 1024
n = number.getPrime(length)

flag = "flag{c651347330664ac62bec7b41531fff8a}"
flag_num = number.bytes_to_long(flag)
print flag_num.bit_length()

#  while True:
    #  if pow(flag_num,3) < 4*n and pow(flag_num,3) > 2*n:
        #  print n
        #  exit(0)
    #  else:
        #  length = length - 1
        #  n = number.getPrime(length)


n = 673833941132194634305224956912475196542540406389151327506250991282482558633571700801509764557179486349064180599962022450657587774784404732506862940581198384914688592165369976765834861947096074486068894538136820153012824447458707709055982537303370223904556719012281560796457

e = 3

c = 195842927404606730857162859322855043827596159372995228343068698748825557779944094652127833313613937220438146589475668015078080491795488128904332153729289230962062203752229623201919504804732267382708255550943083782962085893440782027743307692587332579350525194314429767147754

i = 0
while True:
    potential_value, exact_root = gmpy2.iroot((c + i*n),e)
    if exact_root:
        print number.long_to_bytes(potential_value)
        exit(0)
    else:
        i += 1
