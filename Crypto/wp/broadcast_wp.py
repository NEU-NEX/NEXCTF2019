import gmpy2
from Crypto.Util import number


n = [9355157564647810848272641297768647184356774219445315429924102382871252108762707469547621523201019031354934425712606264949327106867882562048657749554793739L, 6459649460535651479724497053099263921977247914742393999135026235801298545830115750558779702572945262293308409315080719840558854891300851425155021070892331L, 6983749328952556120689051675207949636527485818301523342723021904901590256020847228635371120339880828026408115309571877703791033432014420909384546693263247L, 9113753127116893690993509016216903574397087373940678006932423542378718683386494052543410889544623931875306667459894305994728830422774686650810804492739603L]

c = [4101778380434453602270284848313604775313773421136224316909576774075391030988037168205486796123555561602033825040080328150574012610720908144246194772458136L, 3232897353532561061659131912172752476811045111435443469665191800003129362964622058148838165129225030218160535893129979394651692070549665408834350267126560L, 2122500138508288638856821885687339509186864081557083966811571010282204704215939227401716498535055703207117674364079206823173282838693344698426977580165967L, 772682131499698881331659841088860776819362325726493867301048962824260398735832205701198123823274763045346389515769131397654477135189114594862290533515130L]

def mul_inv(a, b):
    b0 = b
    x0, x1 = 0, 1
    if b==1: return 1
    while a > 1:
        q = a // b
        a, b = b, a % b
        x0, x1 = x1 - q * x0, x0
    if x1 < 0: x1 += b0
    return x1

def chinese_remainder(n, a):
    sum = 0
    prod = reduce(lambda a, b: a*b, n)
    for n_i, a_i in zip(n, a):
        p = prod // n_i
        sum += a_i * mul_inv(p, n_i) * p
    return sum % prod

p4 = chinese_remainder(n,c)
p = gmpy2.iroot(p4,4)[0]

print number.long_to_bytes(p)
