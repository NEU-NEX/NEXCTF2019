from Crypto.Util import number
from gmpy2 import *

#  length = 512
#  p = number.getPrime(length)
#  q = number.getPrime(length)

#  n = p * q

#  phin = (p-1) * (q-1)
#  llength = 24
#  e1 = number.getPrime(llength)
#  e2 = number.getPrime(llength)

#  print p
#  print q
#  print n
#  print e1
#  print e2

#  flag = "flag{c036835366d85df2dc280eb49d456372}"
#  flag_num = number.bytes_to_long(flag)

#  c1 = pow(flag_num, e1, n)
#  c2 = pow(flag_num, e2, n)
#  print c1
#  print c2
def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)


p = 7220785223901258585482634060476196203396268575985358413544237262302865227287889965299068565432644358373451011192372162436955204854134765194852870134189789
q = 12841510835453461066114414029625007351564843871140011935297250966182717069566277190902543858850490266393211648880322807052075897888948921640616242079675427
n = 92725791693210258061425491523382980112995483980112429809401232215143501451762001145088226869779768911195080932309822892907308880394801849300390514008536177135427520984973604314906718649374685267175961210397321788754168384881306021574411325746675400776413148931935068106718257261574681491007974070056737614903
e1 = 13523989
e2 = 13644361
c1 = 34087931978799414698926429481439902098000210385537884795985059483551220897996691656176642574080050171505256752418228257394368854793940530607931529136357712498140712842208978901591190216221460022902755786412339462953224689229621417634117108376719116017775282769155232987527464387462948909726189241176076610125
c2 = 3986708650404489226260782789938582321952730495617047117632929864131087474238350741204150173410724514045945772596077954253837954395609342404247404726175018090740341761764518327506302720864194924454933756966821693811969954022444824305787856539239413831136859553020805709226016971314234915937856945098030843253

g,s1,s2 = egcd(e1, e2)
if s1 < 0:
    s1 = - s1
    c1 = invert(c1, n)
if s2 < 0:
    s2 = - s2
    c2 = invert(c2, n)

print number.long_to_bytes(pow(c1, s1, n) * pow(c2, s2, n) % n)
